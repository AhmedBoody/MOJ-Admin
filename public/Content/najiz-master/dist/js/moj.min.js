"use strict"; function _classCallCheck(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") } function _defineProperties(t, e) { for (var i = 0; i < e.length; i++) { var n = e[i]; n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n) } } function _createClass(t, e, i) { return e && _defineProperties(t.prototype, e), i && _defineProperties(t, i), t } function someFunction21() { setTimeout(function () { $("#horizontal-stepper").nextStep() }, 2e3) } function validationFunction() { setTimeout(function () { $("#custom-validation").nextStep() }, 1600) } function someTrueFunction() { return !0 } !function (t) { var e = 260, i = function () { function i(n, s) { _classCallCheck(this, i), this.defaults = { MENU_WIDTH: e, edge: "left", closeOnClick: !1 }, this.$element = n, this.options = this.assignOptions(s), this.menuOut = !1, this.lastTouchVelocity = { x: { startPosition: 0, startTime: 0, endPosition: 0, endTime: 0 } }, this.$body = t("body"), this.$menu = t("#".concat(this.$element.attr("data-activates"))), this.$sidenavOverlay = t("#sidenav-overlay"), this.$dragTarget = t('<div class="drag-target"></div>'), this.$body.append(this.$dragTarget), this.init() } return _createClass(i, [{ key: "init", value: function () { this.setMenuWidth(), this.setMenuTranslation(), this.closeOnClick(), this.openOnClick(), this.bindTouchEvents() } }, { key: "bindTouchEvents", value: function () { var t = this; this.$dragTarget.on("click", function () { t.removeMenu() }), this.$dragTarget.on("touchstart", function (e) { t.lastTouchVelocity.x.startPosition = e.touches[0].clientX, t.lastTouchVelocity.x.startTime = Date.now() }), this.$dragTarget.on("touchmove", this.touchmoveEventHandler.bind(this)), this.$dragTarget.on("touchend", this.touchendEventHandler.bind(this)) } }, { key: "touchmoveEventHandler", value: function (t) { if ("touchmove" === t.type) { var e = t.touches[0], i = e.clientX; Date.now() - this.lastTouchVelocity.x.startTime > 20 && (this.lastTouchVelocity.x.startPosition = e.clientX, this.lastTouchVelocity.x.startTime = Date.now()), this.disableScrolling(), 0 !== this.$sidenavOverlay.length || this.buildSidenavOverlay(), "left" === this.options.edge && (i > this.options.MENU_WIDTH ? i = this.options.MENU_WIDTH : i < 0 && (i = 0)), this.translateSidenavX(i), this.updateOverlayOpacity(i) } } }, { key: "panEventHandler", value: function (t) { if ("touch" === t.gesture.pointerType) { var e = t.gesture.center.x; this.disableScrolling(), 0 !== this.$sidenavOverlay.length || this.buildSidenavOverlay(), "left" === this.options.edge && (e > this.options.MENU_WIDTH ? e = this.options.MENU_WIDTH : e < 0 && (e = 0)), this.translateSidenavX(e), this.updateOverlayOpacity(e) } } }, { key: "translateSidenavX", value: function (t) { if ("left" === this.options.edge) { var e = t >= this.options.MENU_WIDTH / 2; this.menuOut = e, this.$menu.css("transform", "translateX(".concat(t - this.options.MENU_WIDTH, "px)")) } else { var i = t < window.innerWidth - this.options.MENU_WIDTH / 2; this.menuOut = i; var n = t - this.options.MENU_WIDTH / 2; n < 0 && (n = 0), this.$menu.css("transform", "translateX(".concat(n, "px)")) } } }, { key: "updateOverlayOpacity", value: function (t) { var e; e = "left" === this.options.edge ? t / this.options.MENU_WIDTH : Math.abs((t - window.innerWidth) / this.options.MENU_WIDTH), this.$sidenavOverlay.velocity({ opacity: e }, { duration: 10, queue: !1, easing: "easeOutQuad" }) } }, { key: "buildSidenavOverlay", value: function () { var e = this; this.$sidenavOverlay = t('<div id="sidenav-overlay"></div>'), this.$sidenavOverlay.css("opacity", 0).on("click", function () { e.removeMenu() }), this.$body.append(this.$sidenavOverlay) } }, { key: "disableScrolling", value: function () { var t = this.$body.innerWidth(); this.$body.css("overflow", "hidden"), this.$body.width(t) } }, { key: "touchendEventHandler", value: function (t) { if ("touchend" === t.type) { var e = t.changedTouches[0]; this.lastTouchVelocity.x.endTime = Date.now(), this.lastTouchVelocity.x.endPosition = e.clientX; var i = this.calculateTouchVelocityX(), n = e.clientX, s = n - this.options.MENU_WIDTH, a = n - this.options.MENU_WIDTH / 2; s > 0 && (s = 0), a < 0 && (a = 0), "left" === this.options.edge ? (this.menuOut && i <= .3 || i < -.5 ? (0 !== s && this.translateMenuX([0, s], "300"), this.showSidenavOverlay()) : (!this.menuOut || i > .3) && (this.enableScrolling(), this.translateMenuX([-1 * this.options.MENU_WIDTH - 10, s], "200"), this.hideSidenavOverlay()), this.$dragTarget.css({ width: "10px", right: "", left: 0 })) : this.menuOut && i >= -.3 || i > .5 ? (this.translateMenuX([0, a], "300"), this.showSidenavOverlay(), this.$dragTarget.css({ width: "10px", left: "", right: 0 })) : (!this.menuOut || i < -.3) && (this.enableScrolling(), this.translateMenuX([this.options.MENU_WIDTH + 10, a], "200"), this.hideSidenavOverlay(), this.$dragTarget.css({ width: "10px", left: 0, right: "" })) } } }, { key: "calculateTouchVelocityX", value: function () { return Math.abs(this.lastTouchVelocity.x.endPosition - this.lastTouchVelocity.x.startPosition) / Math.abs(this.lastTouchVelocity.x.endTime - this.lastTouchVelocity.x.startTime) } }, { key: "panendEventHandler", value: function (t) { if ("touch" === t.gesture.pointerType) { var e = t.gesture.velocityX, i = t.gesture.center.x, n = i - this.options.MENU_WIDTH, s = i - this.options.MENU_WIDTH / 2; n > 0 && (n = 0), s < 0 && (s = 0), "left" === this.options.edge ? (this.menuOut && e <= .3 || e < -.5 ? (0 !== n && this.translateMenuX([0, n], "300"), this.showSidenavOverlay()) : (!this.menuOut || e > .3) && (this.enableScrolling(), this.translateMenuX([-1 * this.options.MENU_WIDTH - 10, n], "200"), this.hideSidenavOverlay()), this.$dragTarget.css({ width: "10px", right: "", left: 0 })) : this.menuOut && e >= -.3 || e > .5 ? (this.translateMenuX([0, s], "300"), this.showSidenavOverlay(), this.$dragTarget.css({ width: "50%", right: "", left: 0 })) : (!this.menuOut || e < -.3) && (this.enableScrolling(), this.translateMenuX([this.options.MENU_WIDTH + 10, s], "200"), this.hideSidenavOverlay(), this.$dragTarget.css({ width: "10px", right: 0, left: "" })) } } }, { key: "translateMenuX", value: function (t, e) { this.$menu.velocity({ translateX: t }, { duration: "string" == typeof e ? Number(e) : e, queue: !1, easing: "easeOutQuad" }) } }, { key: "hideSidenavOverlay", value: function () { this.$sidenavOverlay.velocity({ opacity: 0 }, { duration: 200, queue: !1, easing: "easeOutQuad", complete: function () { t(this).remove() } }), this.$sidenavOverlay = t() } }, { key: "showSidenavOverlay", value: function () { this.$sidenavOverlay.velocity({ opacity: 1 }, { duration: 50, queue: !1, easing: "easeOutQuad" }) } }, { key: "enableScrolling", value: function () { this.$body.css({ overflow: "", width: "" }) } }, { key: "openOnClick", value: function () { var e = this; this.$element.on("click", function (i) { if (i.preventDefault(), !0 === e.menuOut) e.menuOut = !1, e.removeMenu(); else { e.$sidenavOverlay = t('<div id="sidenav-overlay"></div>'), e.$body.append(e.$sidenavOverlay); var n = []; n = "left" === e.options.edge ? [0, -1 * e.options.MENU_WIDTH] : [0, e.options.MENU_WIDTH], e.$menu.velocity({ translateX: n }, { duration: 300, queue: !1, easing: "easeOutQuad" }), e.$sidenavOverlay.on("click", function () { e.removeMenu() }) } }) } }, { key: "closeOnClick", value: function () { var t = this; !0 === this.options.closeOnClick && this.$menu.on("click", "a:not(.collapsible-header)", function () { t.removeMenu() }) } }, { key: "setMenuTranslation", value: function () { var e = this; "left" === this.options.edge ? (this.$menu.css("transform", "translateX(-100%)"), this.$dragTarget.css({ left: 0 })) : (this.$menu.addClass("right-aligned").css("transform", "translateX(100%)"), this.$dragTarget.css({ right: 0 })), this.$menu.hasClass("fixed") && (window.innerWidth > 993 && this.$menu.css("transform", "translateX(0)"), t(window).resize(function () { t(window).width() >= 600 && t(window).resize(function () { if (window.innerWidth > 993) e.$sidenavOverlay.length ? e.removeMenu(!0) : e.$menu.css("transform", "translateX(0%)"); else if (!1 === e.menuOut) { var t = "left" === e.options.edge ? "-100" : "100"; e.$menu.css("transform", "translateX(".concat(t, "%)")) } }) })) } }, { key: "setMenuWidth", value: function () { var i = t("#".concat(this.$menu.attr("id"))).find("> .sidenav-bg"); this.options.MENU_WIDTH !== e && (this.$menu.css("width", this.options.MENU_WIDTH), i.css("width", this.options.MENU_WIDTH)) } }, { key: "assignOptions", value: function (e) { return t.extend({}, this.defaults, e) } }, { key: "removeMenu", value: function (t) { var e = this; this.$body.css({ overflow: "", width: "" }), this.$menu.velocity({ translateX: "left" === this.options.edge ? "-100%" : "100%" }, { duration: 200, queue: !1, easing: "easeOutCubic", complete: function () { !0 === t && (e.$menu.removeAttr("style"), e.$menu.css("width", e.options.MENU_WIDTH)) } }), this.hideSidenavOverlay() } }, { key: "show", value: function () { this.trigger("click") } }, { key: "hide", value: function () { this.$sidenavOverlay.trigger("click") } }]), i }(); t.fn.sideNav = function (e) { return this.each(function () { new i(t(this), e) }) } }(jQuery), $(".button-collapseRtl").sideNav({ edge: "right", closeOnClick: !1 }), $(".button-collapse").sideNav({ closeOnClick: !1 }), $(function () { $(".btn-view").click(function () { $(".newClass").toggleClass("anotherNewClass") }) }), $(function () { $(".btn-conta").click(function () { $(".sharing").toggleClass("open"), $(this).toggleClass("open") }) }), $(function () { $(".btn-setting").click(function () { $(".setting-option").toggleClass("open"), $(this).toggleClass("open") }) }), $(".datepicker").pickadate(), $("#input_starttime").pickatime({}), $(document).ready(function () { $(".mdb-select2").materialSelect() }), $(document).ready(function () { $(".stepper").mdbStepper() }), $(window).on("load", function () { $("#mdb-preloader").fadeOut("slow") }); let wow = new WOW({ boxClass: "wow", animateClass: "animated", offset: 0, mobile: !0, live: !0 }); wow.init(), $().ready(function () { let t = $(".sidebar"), e = t.find(".sidebar-background"); $(".setting-option .active-color span").click(function () { $(this).siblings().removeClass("active"), $(this).addClass("active"); var e = $(this).data("color"); 0 != t.length && t.attr("data-color", e) }), $(".setting-option .background-color .badge").click(function () { $(this).siblings().removeClass("active"), $(this).addClass("active"); var e = $(this).data("background-color"); 0 != t.length && t.attr("data-background-color", e) }), $(".setting-option .img-holder").click(function () { let t = $(".full-page-background"); $(this).parent("li").siblings().removeClass("active"), $(this).parent("li").addClass("active"); var i = $(this).find("img").attr("src"); if (0 != e.length && 0 != $(".switch-sidebar-image input:checked").length && e.fadeOut("fast", function () { e.css("background-image", 'url("' + i + '")'), e.fadeIn("fast") }), 0 != t.length && 0 != $(".switch-sidebar-image input:checked").length) { var n = $(".fixed-plugin li.active .img-holder").find("img").data("src"); t.fadeOut("fast", function () { t.css("background-image", 'url("' + n + '")'), t.fadeIn("fast") }) } if (0 == $(".switch-sidebar-image input:checked").length) { i = $(".setting-option li.active .img-holder").find("img").attr("src"), n = $(".fixed-plugin li.active .img-holder").find("img").data("src"); e.css("background-image", 'url("' + i + '")'), t.css("background-image", 'url("' + n + '")') } $(".green-button").on({ click: function () { $("#change-image").attr("src", root_path + "img/najiz-white.svg") } }), $(".white-button").on({ click: function () { $("#change-image").attr("src", root_path + "img/najiz-dark.svg") } }), $(".yellow-button").on({ click: function () { $("#change-image").attr("src", "img/najiz-white.svg") } }) }), $("a.resize-sidebar").on("click", function () { $("div#slide-out").attr("data-toggle", "close-slide-toggle" == $("div#slide-out").attr("data-toggle") ? "slide-toggle" : "close-slide-toggle"), $("div#slide-out").toggleClass("small-menu"), $("nav.navbar").attr("data-toggle", "toggle-no" == $("nav.navbar").attr("data-toggle") ? "toggle-open" : "toggle-no"), $("main").attr("data-toggle", "toggle-no" == $("main").attr("data-toggle") ? "toggle-open" : "toggle-no"), $("footer").attr("data-toggle", "toggle-no" == $("footer").attr("data-toggle") ? "toggle-open" : "toggle-no") }), $(document).ready(function () { var t = 0; $(".resize-sidebar").click(function () { 0 == t ? ($("#change-image").attr("src", root_path + "img/najiz-n.svg").css({ width: "100px" }), t = 1) : 1 == t && ($("#change-image").attr("src", root_path + "img/najiz-dark.svg").css({ width: "110px" }), t = 0) }) }), $(document).ready(function () { $("body").on("mouseenter", ".small-menu", function () { $("#change-image").attr("src", root_path + "img/najiz-dark.svg").css({ width: "110px" }) }), $("body").on("mouseleave", ".small-menu", function () { $("#change-image").attr("src", root_path + "img/najiz-n.svg").css({ width: "100px" }) }) }) });